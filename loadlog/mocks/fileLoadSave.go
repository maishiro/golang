// Code generated by MockGen. DO NOT EDIT.
// Source: fileLoadSave.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dataframe "github.com/go-gota/gota/dataframe"
	gomock "github.com/golang/mock/gomock"
)

// MockFileLoadSave is a mock of FileLoadSave interface.
type MockFileLoadSave struct {
	ctrl     *gomock.Controller
	recorder *MockFileLoadSaveMockRecorder
}

// MockFileLoadSaveMockRecorder is the mock recorder for MockFileLoadSave.
type MockFileLoadSaveMockRecorder struct {
	mock *MockFileLoadSave
}

// NewMockFileLoadSave creates a new mock instance.
func NewMockFileLoadSave(ctrl *gomock.Controller) *MockFileLoadSave {
	mock := &MockFileLoadSave{ctrl: ctrl}
	mock.recorder = &MockFileLoadSaveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileLoadSave) EXPECT() *MockFileLoadSaveMockRecorder {
	return m.recorder
}

// LoadFile mocks base method.
func (m *MockFileLoadSave) LoadFile(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFile", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadFile indicates an expected call of LoadFile.
func (mr *MockFileLoadSaveMockRecorder) LoadFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFile", reflect.TypeOf((*MockFileLoadSave)(nil).LoadFile), path)
}

// SaveFileCSV mocks base method.
func (m *MockFileLoadSave) SaveFileCSV(df *dataframe.DataFrame, pathFile string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveFileCSV", df, pathFile)
}

// SaveFileCSV indicates an expected call of SaveFileCSV.
func (mr *MockFileLoadSaveMockRecorder) SaveFileCSV(df, pathFile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFileCSV", reflect.TypeOf((*MockFileLoadSave)(nil).SaveFileCSV), df, pathFile)
}
